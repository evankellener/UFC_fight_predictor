DROP VIEW IF EXISTS single_full_view;


CREATE VIEW single_full_view AS
SELECT
    date(ed.DATE) AS DATE,
    ms.jbout,
    ms.jevent,
    ms.jfighter,
    ms.EVENT,
    ms.BOUT,
    ms.FIGHTER,
    w.fight_time_minutes,
    IFNULL(SUM(fight_time_minutes) OVER wu1, 0) AS precomp_tot_time_in_cage,
    IFNULL(SUM(fight_time_minutes) OVER wu0, 0) AS postcomp_tot_time_in_cage,
    (julianday(DATE(ed.DATE)) - julianday(DATE(t.DOB))) / 365.25 AS age,
    --(julianday(date(ed.DATE)) - julianday(date(t.DOB))) / 365 AS age,
    t.HEIGHT,
    t.WEIGHT,
    t.REACH,
    t.STANCE,
    date(t.DOB) AS DOB,
    t.sex,
    t.weightindex,
    t.weight_stat,
    r.weightindex AS weight_of_fight,
    IFNULL(AVG(r.weightindex)  OVER w31, 0) AS precomp_weight_avg3,
    IFNULL(AVG(r.weightindex) OVER w20, 1) AS postcomp_weight_avg3,
    r.round,
    r."TIME FORMAT" AS time_format,
    w.win,
    w.loss,
    ms.kd,
    w.udec,
    w.udecd,
    w.mdec,
    w.mdecd,
    w.sdec,
    w.sdecd,
    w.subw,
    w.subwd,
    w.ko,
    w.kod,
    ms.subatt,
    IFNULL(SUM(fight_time_minutes) OVER w20, 0) AS postcomp_tot_time_in_cage_3,
    IFNULL(SUM(fight_time_minutes) OVER w31, 0) AS precomp_tot_time_in_cage_3,
    IFNULL(SUM(fight_time_minutes) OVER w40, 0) AS postcomp_tot_time_in_cage_5,
    IFNULL(SUM(fight_time_minutes) OVER w51, 0) AS precomp_tot_time_in_cage_5,
    -- SLpM: Significant Strikes Landed per Minute over 3 and 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu0, 0.0) = 0.0 THEN 0.0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER wu0  , 0.0) / IFNULL(SUM(fight_time_minutes ) OVER wu0 , 0.0) 
    END AS postcomp_sigstr_pm,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu1, 0) = 0 THEN 0.0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(fight_time_minutes) OVER wu1, 0)
    END AS precomp_sigstr_pm,
    -- 3 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(fight_time_minutes) OVER w20, 0)
    END AS postcomp_sigstr_pm3,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(fight_time_minutes) OVER w31, 0)
    END AS precomp_sigstr_pm3,
    -- 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(fight_time_minutes) OVER w40, 0)
    END AS postcomp_sigstr_pm5,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(fight_time_minutes) OVER w51, 0)
    END AS precomp_sigstr_pm5,
    -- TDAvg: average take downs landed per 15 minutes over 3 and 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER wu0, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER wu0, 0)
    END AS postcomp_tdavg,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER wu1, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER wu1, 0)
    END AS precomp_tdavg,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w20, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w20, 0)
    END AS postcomp_tdavg3,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w31, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w31, 0)
    END AS precomp_tdavg3,
    -- 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w40, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w40, 0)
    END AS postcomp_tdavg5,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w51, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w51, 0)
    END AS precomp_tdavg5,
    -- SApM: Significant Strikes Absorbed per Minute over 3 and 5 fights
    sa.sigstrabs,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(fight_time_minutes) OVER wu0, 0)
    END AS postcomp_sapm,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(fight_time_minutes) OVER wu1, 0)
    END AS precomp_sapm,
    -- 3 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w31, 0) / IFNULL(SUM(fight_time_minutes) OVER w31, 0)
    END AS precomp_sapm3,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w20, 0) / IFNULL(SUM(fight_time_minutes) OVER w20, 0)
    END AS postcomp_sapm3,
    -- 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w51, 0) / IFNULL(SUM(fight_time_minutes) OVER w51, 0)
    END AS precomp_sapm5,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w40, 0) / IFNULL(SUM(fight_time_minutes) OVER w40, 0)
    END AS postcomp_sapm5,
    -- SubAvg: average submission attempts per 15 minutes over 3 and 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(subatt AS FLOAT)) OVER wu0, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER wu0, 0)
    END AS postcomp_subavg,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(subatt AS FLOAT)) OVER wu1, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER wu1, 0)
    END AS precomp_subavg,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(subatt AS FLOAT)) OVER w20, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w20, 0)
    END AS postcomp_subavg3,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(subatt AS FLOAT)) OVER w31, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w31, 0)
    END AS precomp_subavg3,
    -- 5 fights
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(subatt AS FLOAT)) OVER w40, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w40, 0)
    END AS postcomp_subavg5,
    CASE 
        WHEN IFNULL(SUM(fight_time_minutes) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(subatt AS FLOAT)) OVER w51, 0) * 15 / IFNULL(SUM(fight_time_minutes) OVER w51, 0)
    END AS precomp_subavg5,
    -- TdDef: Takedown Defense
    sa.tdabs,
    sa.tdattfromopp,
    CASE 
        WHEN IFNULL(SUM(tdattfromopp) OVER wu0, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(tdabs AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(tdattfromopp) OVER wu0, 0))
    END AS postcomp_tddef,
    CASE 
        WHEN IFNULL(SUM(tdattfromopp) OVER wu1, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(tdabs AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(tdattfromopp) OVER wu1, 0))
    END AS precomp_tddef,
    -- 3 fights
    CASE 
        WHEN IFNULL(SUM(tdattfromopp) OVER w20, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(tdabs AS FLOAT)) OVER w20, 0) / IFNULL(SUM(tdattfromopp) OVER w20, 0))
    END AS postcomp_tddef3,
    CASE 
        WHEN IFNULL(SUM(tdattfromopp) OVER w31, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(tdabs AS FLOAT)) OVER w31, 0) / IFNULL(SUM(tdattfromopp) OVER w31, 0))
    END AS precomp_tddef3,
    -- 5 fights
    CASE 
        WHEN IFNULL(SUM(tdattfromopp) OVER w40, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(tdabs AS FLOAT)) OVER w40, 0) / IFNULL(SUM(tdattfromopp) OVER w40, 0))
    END AS postcomp_tddef5,
    CASE 
        WHEN IFNULL(SUM(tdattfromopp) OVER w51, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(tdabs AS FLOAT)) OVER w51, 0) / IFNULL(SUM(tdattfromopp) OVER w51, 0))
    END AS precomp_tddef5,
    -- Str. Acc. Significant Striking Accuracy with average of 3 and 5 fights
    ms.sigstracc AS ostrabs,
    IFNULL(SUM(sigstracc) OVER wu0, 0) AS postcomp_ostrabssum,
    ms.sigstracc,
    ms.sigstratt,
    IFNULL(SUM(sigstracc) OVER wu1, 0) AS precomp_sigstraccsum,
    IFNULL(SUM(sigstracc) OVER wu0, 0) AS postcomp_sigstraccsum,
    CASE 
        WHEN IFNULL(SUM(sigstratt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(sigstratt) OVER wu0, 0)
    END AS postcomp_sigstr_perc,
    CASE 
        WHEN IFNULL(SUM(sigstratt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(sigstratt) OVER wu1, 0)
    END AS precomp_sigstr_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(sigstratt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(sigstratt) OVER w31, 0)
    END AS precomp_sigstr_perc3,
    CASE 
        WHEN IFNULL(SUM(sigstratt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(sigstratt) OVER w20, 0)
    END AS postcomp_sigstr_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(sigstratt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(sigstratt) OVER w51, 0)
    END AS precomp_sigstr_perc5,
    CASE 
        WHEN IFNULL(SUM(sigstratt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(sigstracc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(sigstratt) OVER w40, 0)
    END AS postcomp_sigstr_perc5,
    -- StrDef: Striking Defense 
    sa.sigstrattfromopp,
    CASE 
        WHEN IFNULL(SUM(sa.sigstrattfromopp) OVER wu0, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(sigstrattfromopp) OVER wu0, 0))
    END AS postcomp_strdef,
    CASE 
        WHEN IFNULL(SUM(sa.sigstrattfromopp) OVER wu1, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(sigstrattfromopp) OVER wu1, 0))
    END AS precomp_strdef,
    -- 3 fights
    CASE 
        WHEN IFNULL(SUM(sa.sigstrattfromopp) OVER w20, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w20, 0) / IFNULL(SUM(sigstrattfromopp) OVER w20, 0))
    END AS postcomp_strdef3,
    CASE 
        WHEN IFNULL(SUM(sa.sigstrattfromopp) OVER w31, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w31, 0) / IFNULL(SUM(sigstrattfromopp) OVER w31, 0))
    END AS precomp_strdef3,
    -- 5 fights
    CASE 
        WHEN IFNULL(SUM(sa.sigstrattfromopp) OVER w40, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w40, 0) / IFNULL(SUM(sigstrattfromopp) OVER w40, 0))
    END AS postcomp_strdef5,
    CASE 
        WHEN IFNULL(SUM(sa.sigstrattfromopp) OVER w51, 0) = 0 THEN 0
        ELSE 1 - (IFNULL(SUM(CAST(sigstrabs AS FLOAT)) OVER w51, 0) / IFNULL(SUM(sigstrattfromopp) OVER w51, 0))
    END AS precomp_strdef5,
    -- TD Acc. Take Down Accuracy with average of 3 and 5 fights
    ms.tdacc,
    ms.tdatt,
    CASE 
        WHEN IFNULL(SUM(tdatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(tdatt) OVER wu0, 0)
    END AS postcomp_tdacc_perc,
    CASE 
        WHEN IFNULL(SUM(tdatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(tdatt) OVER wu1, 0)
    END AS precomp_tdacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(tdatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(tdatt) OVER w31, 0)
    END AS precomp_tdacc_perc3,
    CASE 
        WHEN IFNULL(SUM(tdatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(tdatt) OVER w20, 0)
    END AS postcomp_tdacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(tdatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(tdatt) OVER w51, 0)
    END AS precomp_tdacc_perc5,
    CASE 
        WHEN IFNULL(SUM(tdatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(tdacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(tdatt) OVER w40, 0)
    END AS postcomp_tdacc_perc5,
    -- Total strike accuracy over 3 and 5 fights
    ms.totalacc,
    ms.totalatt,
    CASE 
        WHEN IFNULL(SUM(totalatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(totalacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(totalatt) OVER wu0, 0)
    END AS postcomp_totalacc_perc,
    CASE 
        WHEN IFNULL(SUM(totalatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(totalacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(totalatt) OVER wu1, 0)
    END AS precomp_totalacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(totalatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(totalacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(totalatt) OVER w31, 0)
    END AS precomp_totalacc_perc3,
    CASE 
        WHEN IFNULL(SUM(totalatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(totalacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(totalatt) OVER w20, 0)
    END AS postcomp_totalacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(totalatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(totalacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(totalatt) OVER w51, 0)
    END AS precomp_totalacc_perc5,
    CASE 
        WHEN IFNULL(SUM(totalatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(totalacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(totalatt) OVER w40, 0)
    END AS postcomp_totalacc_perc5,
    -- average head strike accuracy over 3 and 5 fights
    ms.headacc,
    ms.headatt,
    CASE 
        WHEN IFNULL(SUM(headatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(headacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(headatt) OVER wu0, 0)
    END AS postcomp_headacc_perc,
    CASE 
        WHEN IFNULL(SUM(headatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(headacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(headatt) OVER wu1, 0)
    END AS precomp_headacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(headatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(headacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(headatt) OVER w31, 0)
    END AS precomp_headacc_perc3,
    CASE 
        WHEN IFNULL(SUM(headatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(headacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(headatt) OVER w20, 0)
    END AS postcomp_headacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(headatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(headacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(headatt) OVER w51, 0)
    END AS precomp_headacc_perc5,
    CASE 
        WHEN IFNULL(SUM(headatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(headacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(headatt) OVER w40, 0)
    END AS postcomp_headacc_perc5,
    -- average body strike accuracy over 3 and 5 fights
    ms.bodyacc,
    ms.bodyatt,
    CASE 
        WHEN IFNULL(SUM(bodyatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(bodyacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(bodyatt) OVER wu0, 0)
    END AS postcomp_bodyacc_perc,
    CASE 
        WHEN IFNULL(SUM(bodyatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(bodyacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(bodyatt) OVER wu1, 0)
    END AS precomp_bodyacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(bodyatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(bodyacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(bodyatt) OVER w31, 0)
    END AS precomp_bodyacc_perc3,
    CASE 
        WHEN IFNULL(SUM(bodyatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(bodyacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(bodyatt) OVER w20, 0)
    END AS postcomp_bodyacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(bodyatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(bodyacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(bodyatt) OVER w51, 0)
    END AS precomp_bodyacc_perc5,
    CASE 
        WHEN IFNULL(SUM(bodyatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(bodyacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(bodyatt) OVER w40, 0)
    END AS postcomp_bodyacc_perc5,
    -- average leg strike accuracy over 3 and 5 fights
    ms.legacc,
    ms.legatt,
    CASE 
        WHEN IFNULL(SUM(legatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(legacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(legatt) OVER wu0, 0)
    END AS postcomp_legacc_perc,
    CASE 
        WHEN IFNULL(SUM(legatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(legacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(legatt) OVER wu1, 0)
    END AS precomp_legacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(legatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(legacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(legatt) OVER w31, 0)
    END AS precomp_legacc_perc3,
    CASE 
        WHEN IFNULL(SUM(legatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(legacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(legatt) OVER w20, 0)
    END AS postcomp_legacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(legatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(legacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(legatt) OVER w51, 0)
    END AS precomp_legacc_perc5,
    CASE 
        WHEN IFNULL(SUM(legatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(legacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(legatt) OVER w40, 0)
    END AS postcomp_legacc_perc5,
    -- average distance strike accuracy over 3 and 5 fights
    ms.distacc,
    ms.distatt,
    CASE 
        WHEN IFNULL(SUM(distatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(distacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(distatt) OVER wu0, 0)
    END AS postcomp_distacc_perc,
    CASE 
        WHEN IFNULL(SUM(distatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(distacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(distatt) OVER wu1, 0)
    END AS precomp_distacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(distatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(distacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(distatt) OVER w31, 0)
    END AS precomp_distacc_perc3,
    CASE 
        WHEN IFNULL(SUM(distatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(distacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(distatt) OVER w20, 0)
    END AS postcomp_distacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(distatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(distacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(distatt) OVER w51, 0)
    END AS precomp_distacc_perc5,
    CASE 
        WHEN IFNULL(SUM(distatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(distacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(distatt) OVER w40, 0)
    END AS postcomp_distacc_perc5,
    -- average clinch strike accuracy over 3 and 5 fights
    ms.clinchacc,
    ms.clinchatt,
    CASE 
        WHEN IFNULL(SUM(clinchatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(clinchacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(clinchatt) OVER wu0, 0)
    END AS postcomp_clinchacc_perc,
    CASE 
        WHEN IFNULL(SUM(clinchatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(clinchacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(clinchatt) OVER wu1, 0)
    END AS precomp_clinchacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(clinchatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(clinchacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(clinchatt) OVER w31, 0)
    END AS precomp_clinchacc_perc3,
    CASE 
        WHEN IFNULL(SUM(clinchatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(clinchacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(clinchatt) OVER w20, 0)
    END AS postcomp_clinchacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(clinchatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(clinchacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(clinchatt) OVER w51, 0)
    END AS precomp_clinchacc_perc5,
    CASE 
        WHEN IFNULL(SUM(clinchatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(clinchacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(clinchatt) OVER w40, 0)
    END AS postcomp_clinchacc_perc5,
    -- average ground strike accuracy over 3 and 5 fights
    ms.groundacc,
    ms.groundatt,
    CASE 
        WHEN IFNULL(SUM(groundatt) OVER wu0, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(groundacc AS FLOAT)) OVER wu0, 0) / IFNULL(SUM(groundatt) OVER wu0, 0)
    END AS postcomp_groundacc_perc,
    CASE 
        WHEN IFNULL(SUM(groundatt) OVER wu1, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(groundacc AS FLOAT)) OVER wu1, 0) / IFNULL(SUM(groundatt) OVER wu1, 0)
    END AS precomp_groundacc_perc,
    -- 3 fight average
    CASE 
        WHEN IFNULL(SUM(groundatt) OVER w20, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(groundacc AS FLOAT)) OVER w20, 0) / IFNULL(SUM(groundatt) OVER w20, 0)
    END AS postcomp_groundacc_perc3,
    CASE 
        WHEN IFNULL(SUM(groundatt) OVER w31, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(groundacc AS FLOAT)) OVER w31, 0) / IFNULL(SUM(groundatt) OVER w31, 0)
    END AS precomp_groundacc_perc3,
    -- 5 fight average
    CASE 
        WHEN IFNULL(SUM(groundatt) OVER w40, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(groundacc AS FLOAT)) OVER w40, 0) / IFNULL(SUM(groundatt) OVER w40, 0)
    END AS postcomp_groundacc_perc5,
    CASE 
        WHEN IFNULL(SUM(groundatt) OVER w51, 0) = 0 THEN 0
        ELSE IFNULL(SUM(CAST(groundacc AS FLOAT)) OVER w51, 0) / IFNULL(SUM(groundatt) OVER w51, 0)
    END AS precomp_groundacc_perc5,
    -- win/loss/ko/kdo over 3 and 5 fights
    IFNULL(SUM(win) OVER wu0, 0) AS postcomp_winsum,
    IFNULL(SUM(win) OVER wu1, 0) AS precomp_winsum,
    IFNULL(COUNT(*) OVER wu0, 0) AS postcomp_boutcount,
    IFNULL(COUNT(*) OVER wu1, 0) AS precomp_boutcount,
    IFNULL(AVG(win) OVER wu0, 0) AS postcomp_winavg,
    IFNULL(AVG(win) OVER wu1, 0) AS precomp_winavg,
    IFNULL(SUM(win) OVER w20, 0) AS postcomp_winsum3,
    IFNULL(SUM(win) OVER w31, 0) AS precomp_winsum3,
    IFNULL(AVG(win) OVER w20, 0) AS postcomp_winavg3,
    IFNULL(AVG(win) OVER w31, 0) AS precomp_winavg3,
    IFNULL(SUM(win) OVER w40, 0) AS postcomp_winsum5,
    IFNULL(SUM(win) OVER w51, 0) AS precomp_winsum5,
    IFNULL(AVG(win) OVER w40, 0) AS postcomp_winavg5,
    IFNULL(AVG(win) OVER w51, 0) AS precomp_winavg5,
    IFNULL(SUM(loss) OVER wu0, 0) AS postcomp_losssum,
    IFNULL(SUM(loss) OVER wu1, 0) AS precomp_losssum,
    IFNULL(AVG(loss) OVER wu0, 0) AS postcomp_lossavg,
    IFNULL(AVG(loss) OVER wu1, 0) AS precomp_lossavg,
    IFNULL(SUM(loss) OVER w20, 0) AS postcomp_losssum3,
    IFNULL(SUM(loss) OVER w31, 0) AS precomp_losssum3,
    IFNULL(AVG(loss) OVER w20, 0) AS postcomp_lossavg3,
    IFNULL(AVG(loss) OVER w31, 0) AS precomp_lossavg3,
    IFNULL(SUM(loss) OVER w40, 0) AS postcomp_losssum5,
    IFNULL(SUM(loss) OVER w51, 0) AS precomp_losssum5,
    IFNULL(AVG(loss) OVER w40, 0) AS postcomp_lossavg5,
    IFNULL(AVG(loss) OVER w51, 0) AS precomp_lossavg5,
    IFNULL(SUM(kd) OVER wu0, 0) AS postcomp_kdsum,
    IFNULL(SUM(kd) OVER wu1, 0) AS precomp_kdsum,
    IFNULL(AVG(kd) OVER wu0, 0) AS postcomp_kdavg,
    IFNULL(AVG(kd) OVER wu1, 0) AS precomp_kdavg,
    IFNULL(SUM(kd) OVER w20, 0) AS postcomp_kdsum3,
    IFNULL(SUM(kd) OVER w31, 0) AS precomp_kdsum3,
    IFNULL(AVG(kd) OVER w20, 0) AS postcomp_kdavg3,
    IFNULL(AVG(kd) OVER w31, 0) AS precomp_kdavg3,
    IFNULL(SUM(kd) OVER w40, 0) AS postcomp_kdsum5,
    IFNULL(SUM(kd) OVER w51, 0) AS precomp_kdsum5,
    IFNULL(AVG(kd) OVER w40, 0) AS postcomp_kdavg5,
    IFNULL(AVG(kd) OVER w51, 0) AS precomp_kdavg5,
    IFNULL(SUM(kdd) OVER wu0, 0) AS postcomp_kddsum,
    IFNULL(SUM(kdd) OVER wu1, 0) AS precomp_kddsum,
    IFNULL(AVG(kdd) OVER wu0, 0) AS postcomp_kddavg,
    IFNULL(AVG(kdd) OVER wu1, 0) AS precomp_kddavg,
    IFNULL(SUM(kdd) OVER w20, 0) AS postcomp_kddsum3,
    IFNULL(SUM(kdd) OVER w31, 0) AS precomp_kddsum3,
    IFNULL(AVG(kdd) OVER w20, 0) AS postcomp_kddavg3,
    IFNULL(AVG(kdd) OVER w31, 0) AS precomp_kddavg3,
    IFNULL(SUM(kdd) OVER w40, 0) AS postcomp_kddsum5,
    IFNULL(SUM(kdd) OVER w51, 0) AS precomp_kddsum5,
    IFNULL(AVG(kdd) OVER w40, 0) AS postcomp_kddavg5,
    IFNULL(AVG(kdd) OVER w51, 0) AS precomp_kddavg5,
    IFNULL(SUM(ko) OVER wu0, 0) AS postcomp_kosum,
    IFNULL(SUM(ko) OVER wu1, 0) AS precomp_kosum,
    IFNULL(AVG(ko) OVER wu0, 0) AS postcomp_koavg,
    IFNULL(AVG(ko) OVER wu1, 0) AS precomp_koavg,
    IFNULL(SUM(ko) OVER w20, 0) AS postcomp_kosum3,
    IFNULL(SUM(ko) OVER w31, 0) AS precomp_kosum3,
    IFNULL(AVG(ko) OVER w20, 0) AS postcomp_koavg3,
    IFNULL(AVG(ko) OVER w31, 0) AS precomp_koavg3,
    IFNULL(SUM(ko) OVER w40, 0) AS postcomp_kosum5,
    IFNULL(SUM(ko) OVER w51, 0) AS precomp_kosum5,
    IFNULL(AVG(ko) OVER w40, 0) AS postcomp_koavg5,
    IFNULL(AVG(ko) OVER w51, 0) AS precomp_koavg5,
    IFNULL(SUM(kod) OVER wu0, 0) AS postcomp_kodsum,
    IFNULL(SUM(kod) OVER wu1, 0) AS precomp_kodsum,
    IFNULL(AVG(kod) OVER wu0, 0) AS postcomp_kodavg,
    IFNULL(AVG(kod) OVER wu1, 0) AS precomp_kodavg,
    IFNULL(SUM(kod) OVER w20, 0) AS postcomp_kodsum3,
    IFNULL(SUM(kod) OVER w31, 0) AS precomp_kodsum3,
    IFNULL(AVG(kod) OVER w20, 0) AS postcomp_kodavg3,
    IFNULL(AVG(kod) OVER w31, 0) AS precomp_kodavg3,
    IFNULL(SUM(kod) OVER w40, 0) AS postcomp_kodsum5,
    IFNULL(SUM(kod) OVER w51, 0) AS precomp_kodsum5,
    IFNULL(AVG(kod) OVER w40, 0) AS postcomp_kodavg5,
    IFNULL(AVG(kod) OVER w51, 0) AS precomp_kodavg5,
    IFNULL(SUM(subw) OVER wu0, 0) AS postcomp_subwsum,
    IFNULL(SUM(subw) OVER wu1, 0) AS precomp_subwsum,
    IFNULL(AVG(subw) OVER wu0, 0) AS postcomp_subwavg,
    IFNULL(AVG(subw) OVER wu1, 0) AS precomp_subwavg,
    IFNULL(SUM(subw) OVER w20, 0) AS postcomp_subwsum3,
    IFNULL(SUM(subw) OVER w31, 0) AS precomp_subwsum3,
    IFNULL(AVG(subw) OVER w20, 0) AS postcomp_subwavg3,
    IFNULL(AVG(subw) OVER w31, 0) AS precomp_subwavg3,
    IFNULL(SUM(subw) OVER w40, 0) AS postcomp_subwsum5,
    IFNULL(SUM(subw) OVER w51, 0) AS precomp_subwsum5,
    IFNULL(AVG(subw) OVER w40, 0) AS postcomp_subwavg5,
    IFNULL(AVG(subw) OVER w51, 0) AS precomp_subwavg5,
    IFNULL(SUM(subwd) OVER wu0, 0) AS postcomp_subwdsum,
    IFNULL(SUM(subwd) OVER wu1, 0) AS precomp_subwdsum,
    IFNULL(AVG(subwd) OVER wu0, 0) AS postcomp_subwdavg,
    IFNULL(AVG(subwd) OVER wu1, 0) AS precomp_subwdavg,
    IFNULL(SUM(subwd) OVER w20, 0) AS postcomp_subwdsum3,
    IFNULL(SUM(subwd) OVER w31, 0) AS precomp_subwdsum3,
    IFNULL(AVG(subwd) OVER w20, 0) AS postcomp_subwdavg3,
    IFNULL(AVG(subwd) OVER w31, 0) AS precomp_subwdavg3,
    IFNULL(SUM(subwd) OVER w40, 0) AS postcomp_subwdsum5,
    IFNULL(SUM(subwd) OVER w51, 0) AS precomp_subwdsum5,
    IFNULL(AVG(subwd) OVER w40, 0) AS postcomp_subwdavg5,
    IFNULL(AVG(subwd) OVER w51, 0) AS precomp_subwdavg5,
    IFNULL(SUM(udec) OVER wu0, 0) AS postcomp_udecsum,
    IFNULL(SUM(udec) OVER wu1, 0) AS precomp_udecsum,
    IFNULL(AVG(udec) OVER wu0, 0) AS postcomp_udecavg,
    IFNULL(AVG(udec) OVER wu1, 0) AS precomp_udecavg,
    IFNULL(SUM(udec) OVER w20, 0) AS postcomp_udecsum3,
    IFNULL(SUM(udec) OVER w31, 0) AS precomp_udecsum3,
    IFNULL(AVG(udec) OVER w20, 0) AS postcomp_udecavg3,
    IFNULL(AVG(udec) OVER w31, 0) AS precomp_udecavg3,
    IFNULL(SUM(udec) OVER w40, 0) AS postcomp_udecsum5,
    IFNULL(SUM(udec) OVER w51, 0) AS precomp_udecsum5,
    IFNULL(AVG(udec) OVER w40, 0) AS postcomp_udecavg5,
    IFNULL(AVG(udec) OVER w51, 0) AS precomp_udecavg5,
    IFNULL(SUM(udecd) OVER wu0, 0) AS postcomp_udecdsum,
    IFNULL(SUM(udecd) OVER wu1, 0) AS precomp_udecdsum,
    IFNULL(AVG(udecd) OVER wu0, 0) AS postcomp_udecdavg,
    IFNULL(AVG(udecd) OVER wu1, 0) AS precomp_udecdavg,
    IFNULL(SUM(udecd) OVER w20, 0) AS postcomp_udecdsum3,
    IFNULL(SUM(udecd) OVER w31, 0) AS precomp_udecdsum3,
    IFNULL(AVG(udecd) OVER w20, 0) AS postcomp_udecdavg3,
    IFNULL(AVG(udecd) OVER w31, 0) AS precomp_udecdavg3,
    IFNULL(SUM(udecd) OVER w40, 0) AS postcomp_udecdsum5,
    IFNULL(SUM(udecd) OVER w51, 0) AS precomp_udecdsum5,
    IFNULL(AVG(udecd) OVER w40, 0) AS postcomp_udecdavg5,
    IFNULL(AVG(udecd) OVER w51, 0) AS precomp_udecdavg5,
    IFNULL(SUM(sdec) OVER wu0, 0) AS postcomp_sdecsum,
    IFNULL(SUM(sdec) OVER wu1, 0) AS precomp_sdecsum,
    IFNULL(AVG(sdec) OVER wu0, 0) AS postcomp_sdecavg,
    IFNULL(AVG(sdec) OVER wu1, 0) AS precomp_sdecavg,
    IFNULL(SUM(sdec) OVER w20, 0) AS postcomp_sdecsum3,
    IFNULL(SUM(sdec) OVER w31, 0) AS precomp_sdecsum3,
    IFNULL(AVG(sdec) OVER w20, 0) AS postcomp_sdecavg3,
    IFNULL(AVG(sdec) OVER w31, 0) AS precomp_sdecavg3,
    IFNULL(SUM(sdec) OVER w40, 0) AS postcomp_sdecsum5,
    IFNULL(SUM(sdec) OVER w51, 0) AS precomp_sdecsum5,
    IFNULL(AVG(sdec) OVER w40, 0) AS postcomp_sdecavg5,
    IFNULL(AVG(sdec) OVER w51, 0) AS precomp_sdecavg5,
    IFNULL(SUM(sdecd) OVER wu0, 0) AS postcomp_sdecdsum,
    IFNULL(SUM(sdecd) OVER wu1, 0) AS precomp_sdecdsum,
    IFNULL(AVG(sdecd) OVER wu0, 0) AS postcomp_sdecdavg,
    IFNULL(AVG(sdecd) OVER wu1, 0) AS precomp_sdecdavg,
    IFNULL(SUM(sdecd) OVER w20, 0) AS postcomp_sdecdsum3,
    IFNULL(SUM(sdecd) OVER w31, 0) AS precomp_sdecdsum3,
    IFNULL(AVG(sdecd) OVER w20, 0) AS postcomp_sdecdavg3,
    IFNULL(AVG(sdecd) OVER w31, 0) AS precomp_sdecdavg3,
    IFNULL(SUM(sdecd) OVER w40, 0) AS postcomp_sdecdsum5,
    IFNULL(SUM(sdecd) OVER w51, 0) AS precomp_sdecdsum5,
    IFNULL(AVG(sdecd) OVER w40, 0) AS postcomp_sdecdavg5,
    IFNULL(AVG(sdecd) OVER w51, 0) AS precomp_sdecdavg5,
    IFNULL(SUM(mdec) OVER wu0, 0) AS postcomp_mdecsum,
    IFNULL(SUM(mdec) OVER wu1, 0) AS precomp_mdecsum,
    IFNULL(AVG(mdec) OVER wu0, 0) AS postcomp_mdecavg,
    IFNULL(AVG(mdec) OVER wu1, 0) AS precomp_mdecavg,
    IFNULL(SUM(mdec) OVER w20, 0) AS postcomp_mdecsum3,
    IFNULL(SUM(mdec) OVER w31, 0) AS precomp_mdecsum3,
    IFNULL(AVG(mdec) OVER w20, 0) AS postcomp_mdecavg3,
    IFNULL(AVG(mdec) OVER w31, 0) AS precomp_mdecavg3,
    IFNULL(SUM(mdec) OVER w40, 0) AS postcomp_mdecsum5,
    IFNULL(SUM(mdec) OVER w51, 0) AS precomp_mdecsum5,
    IFNULL(AVG(mdec) OVER w40, 0) AS postcomp_mdecavg5,
    IFNULL(AVG(mdec) OVER w51, 0) AS precomp_mdecavg5,
    IFNULL(SUM(mdecd) OVER wu0, 0) AS postcomp_mdecdsum,
    IFNULL(SUM(mdecd) OVER wu1, 0) AS precomp_mdecdsum,
    IFNULL(AVG(mdecd) OVER wu0, 0) AS postcomp_mdecdavg,
    IFNULL(AVG(mdecd) OVER wu1, 0) AS precomp_mdecdavg,
    IFNULL(SUM(mdecd) OVER w20, 0) AS postcomp_mdecdsum3,
    IFNULL(SUM(mdecd) OVER w31, 0) AS precomp_mdecdsum3,
    IFNULL(AVG(mdecd) OVER w20, 0) AS postcomp_mdecdavg3,
    IFNULL(AVG(mdecd) OVER w31, 0) AS precomp_mdecdavg3,
    IFNULL(SUM(mdecd) OVER w40, 0) AS postcomp_mdecdsum5,
    IFNULL(SUM(mdecd) OVER w51, 0) AS precomp_mdecdsum5,
    IFNULL(AVG(mdecd) OVER w40, 0) AS postcomp_mdecdavg5,
    IFNULL(AVG(mdecd) OVER w51, 0) AS precomp_mdecdavg5
FROM
    ufc_fighter_match_stats ms,
    ufc_event_details ed,
    ufc_winlossko w,
    ufc_fighter_tott t,
    ufc_fight_results r,
    (
        SELECT
            DISTINCT
            TRIM(REPLACE(fighter_stats.EVENT, ' ', '')) AS jfs_event,
            TRIM(REPLACE(fighter_stats.FIGHTER, ' ', '')) AS jfs_fighter,
            TRIM(REPLACE(fighter_stats.BOUT, ' ', '')) AS jfs_bout,
            opponent_stats.sigstracc AS sigstrabs,
            opponent_stats.sigstratt AS sigstrattfromopp,
            opponent_stats.tdacc AS tdabs,
            opponent_stats.tdatt AS tdattfromopp,
            opponent_stats.kd AS kdd
        FROM
            ufc_fighter_match_stats fighter_stats
        JOIN
            ufc_fighter_match_stats opponent_stats
        ON
            fighter_stats.jbout = opponent_stats.jbout
            AND LOWER(fighter_stats.jfighter) != LOWER(opponent_stats.jfighter)
            AND fighter_stats.jevent = opponent_stats.jevent
    ) sa
WHERE
    ms.jevent = ed.jevent
    AND ms.jevent = w.jevent
    AND ms.jfighter = w.jfighter
    AND ms.jfighter = t.jfighter
    AND ms.jevent = r.jevent
    AND ms.jbout = r.jbout
    AND ms.jevent = sa.jfs_event
    AND ms.jfighter = sa.jfs_fighter
    AND ms.jbout = sa.jfs_bout
    AND instr(ms.jbout,ms.jfighter) > 0
WINDOW
    w20 AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS BETWEEN 2 PRECEDING AND 0 PRECEDING),
    w31 AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING),
    w40 AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS BETWEEN 4 PRECEDING AND 0 PRECEDING),
    w51 AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS BETWEEN 5 PRECEDING AND 1 PRECEDING),
    wu AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS UNBOUNDED PRECEDING),
    wu0 AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS BETWEEN UNBOUNDED PRECEDING AND 0 PRECEDING),
    wu1 AS (PARTITION BY ms.jfighter ORDER BY date(ed.DATE) ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING);


/* JOIN and pull over Weigth Reach,reach from ufc_fighter_tott. */
DROP VIEW IF EXISTS single_fighter_view;
DROP VIEW IF EXISTS single_opponent_view;
CREATE VIEW single_fighter_view AS
SELECT * from single_full_view
WHERE INSTR(jbout,jfighter) = 1
ORDER BY DATE DESC;
CREATE VIEW single_opponent_view AS
SELECT * from single_full_view
WHERE INSTR(jbout,jfighter) > 1
ORDER BY DATE DESC;

DROP VIEW IF EXISTS pre_final;
Create View pre_final as
SELECT
'DATE',
'jbout',
'jevent',
'jfighter',
'EVENT',
'BOUT',
'FIGHTER',
'fight_time_minutes',
'precomp_tot_time_in_cage',
'postcomp_tot_time_in_cage',
'age',
'HEIGHT',
'WEIGHT',
'REACH',
'STANCE',
'DOB',
'sex',
'weightindex',
'weight_stat',
'weight_of_fight',
'precomp_weight_avg3',
'postcomp_weight_avg3',
'round',
'time_format',
'win',
'loss',
'kd',
'ko',
'kod',
'sub',
'subd',
'udec',
'udecd',
'sdec',
'sdecd',
'mdec',
'mdecd',
'subatt',
'postcomp_tot_time_in_cage_3',
'precomp_tot_time_in_cage_3',
'postcomp_tot_time_in_cage_5',
'precomp_tot_time_in_cage_5',
'postcomp_sigstr_pm',
'precomp_sigstr_pm',
'postcomp_sigstr_pm3',
'precomp_sigstr_pm3',
'postcomp_sigstr_pm5',
'precomp_sigstr_pm5',
'postcomp_tdavg',
'precomp_tdavg',
'postcomp_tdavg3',
'precomp_tdavg3',
'postcomp_tdavg5',
'precomp_tdavg5',
'sigstrabs',
'postcomp_sapm',
'precomp_sapm',
'precomp_sapm3',
'postcomp_sapm3',
'precomp_sapm5',
'postcomp_sapm5',
'postcomp_subavg',
'precomp_subavg',
'postcomp_subavg3',
'precomp_subavg3',
'postcomp_subavg5',
'precomp_subavg5',
'tdabs',
'tdattfromopp',
'postcomp_tddef',
'precomp_tddef',
'postcomp_tddef3',
'precomp_tddef3',
'postcomp_tddef5',
'precomp_tddef5',
'ostrabs',
'postcomp_ostrabssum',
'sigstracc',
'sigstratt',
'precomp_sigstraccsum',
'postcomp_sigstraccsum',
'postcomp_sigstr_perc',
'precomp_sigstr_perc',
'precomp_sigstr_perc3',
'postcomp_sigstr_perc3',
'precomp_sigstr_perc5',
'postcomp_sigstr_perc5',
'sigstrattfromopp',
'postcomp_strdef',
'precomp_strdef',
'postcomp_strdef3',
'precomp_strdef3',
'postcomp_strdef5',
'precomp_strdef5',
'tdacc',
'tdatt',
'postcomp_tdacc_perc',
'precomp_tdacc_perc',
'postcomp_tdacc_perc3',
'precomp_tdacc_perc3',
'postcomp_tdacc_perc5',
'precomp_tdacc_perc5',
'totalacc',
'totalatt',
'postcomp_totalacc_perc',
'precomp_totalacc_perc',
'postcomp_totalacc_perc3',
'precomp_totalacc_perc3',
'postcomp_totalacc_perc5',
'precomp_totalacc_perc5',
'headacc',
'headatt',
'postcomp_headacc_perc',
'precomp_headacc_perc',
'postcomp_headacc_perc3',
'precomp_headacc_perc3',
'postcomp_headacc_perc5',
'precomp_headacc_perc5',
'bodyacc',
'bodyatt',
'postcomp_bodyacc_perc',
'precomp_bodyacc_perc',
'postcomp_bodyacc_perc3',
'precomp_bodyacc_perc3',
'postcomp_bodyacc_perc5',
'precomp_bodyacc_perc5',
'legacc',
'legatt',
'postcomp_legacc_perc',
'precomp_legacc_perc',
'postcomp_legacc_perc3',
'precomp_legacc_perc3',
'postcomp_legacc_perc5',
'precomp_legacc_perc5',
'distacc',
'distatt',
'postcomp_distacc_perc',
'precomp_distacc_perc',
'postcomp_distacc_perc3',
'precomp_distacc_perc3',
'postcomp_distacc_perc5',
'precomp_distacc_perc5',
'clinchacc',
'clinchatt',
'postcomp_clinchacc_perc',
'precomp_clinchacc_perc',
'postcomp_clinchacc_perc3',
'precomp_clinchacc_perc3',
'postcomp_clinchacc_perc5',
'precomp_clinchacc_perc5',
'groundacc',
'groundatt',
'postcomp_groundacc_perc',
'precomp_groundacc_perc',
'postcomp_groundacc_perc3',
'precomp_groundacc_perc3',
'postcomp_groundacc_perc5',
'precomp_groundacc_perc5',
'postcomp_winsum',
'precomp_winsum',
'postcomp_boutcount',
'precomp_boutcount',
'postcomp_winavg',
'precomp_winavg',
'postcomp_winsum3',
'precomp_winsum3',
'postcomp_winavg3',
'precomp_winavg3',
'postcomp_winsum5',
'precomp_winsum5',
'postcomp_winavg5',
'precomp_winavg5',
'postcomp_losssum',
'precomp_losssum',
'postcomp_lossavg',
'precomp_lossavg',
'postcomp_losssum3',
'precomp_losssum3',
'postcomp_lossavg3',
'precomp_lossavg3',
'postcomp_losssum5',
'precomp_losssum5',
'postcomp_lossavg5',
'precomp_lossavg5',
'postcomp_kdsum',
'precomp_kdsum',
'postcomp_kdavg',
'precomp_kdavg',
'postcomp_kdsum3',
'precomp_kdsum3',
'postcomp_kdavg3',
'precomp_kdavg3',
'postcomp_kdsum5',
'precomp_kdsum5',
'postcomp_kdavg5',
'precomp_kdavg5',
'postcomp_kosum',
'precomp_kosum',
'postcomp_koavg',
'precomp_koavg',
'postcomp_kosum3',
'precomp_kosum3',
'postcomp_koavg3',
'precomp_koavg3',
'postcomp_kosum5',
'precomp_kosum5',
'postcomp_koavg5',
'precomp_koavg5',
'postcomp_kodsum',
'precomp_kodsum',
'postcomp_kodavg',
'precomp_kodavg',
'postcomp_kodsum3',
'precomp_kodsum3',
'postcomp_kodavg3',
'precomp_kodavg3',
'postcomp_kodsum5',
'precomp_kodsum5',
'postcomp_kodavg5',
'precomp_kodavg5',
'postcomp_subwsum',
'precomp_subwsum',
'postcomp_subwavg',
'precomp_subwavg',
'postcomp_subwsum3',
'precomp_subwsum3',
'postcomp_subwavg3',
'precomp_subwavg3',
'postcomp_subwsum5',
'precomp_subsum5',
'postcomp_subwavg5',
'precomp_subwavg5',
'postcomp_subwdsum',
'precomp_subwdsum',
'postcomp_subwdavg',
'precomp_subwdavg',
'postcomp_subwdsum3',
'precomp_subdsum3',
'postcomp_subwdavg3',
'precomp_subwdavg3',
'postcomp_subwdsum5',
'precomp_subwdsum5',
'postcomp_subwdavg5',
'precomp_subwdavg5',
'postcomp_udecsum',
'precomp_udecsum',
'postcomp_udecavg',
'precomp_udecavg',
'postcomp_udecsum3',
'precomp_udecsum3',
'postcomp_udecavg3',
'precomp_udecavg3',
'postcomp_udecsum5',
'precomp_udecsum5',
'postcomp_udecavg5',
'precomp_udecavg5',
'postcomp_udecdsum',
'precomp_udecdsum',
'postcomp_udecdavg',
'precomp_udecdavg',
'postcomp_udecdsum3',
'precomp_udecdsum3',
'postcomp_udecdavg3',
'precomp_udecdavg3',
'postcomp_udecdsum5',
'precomp_udecdsum5',
'postcomp_udecdavg5',
'precomp_udecdavg5',
'postcomp_sdecsum',
'precomp_sdecsum',
'postcomp_sdecavg',
'precomp_sdecavg',
'postcomp_sdecsum3',
'precomp_sdecsum3',
'postcomp_sdecavg3',
'precomp_sdecavg3',
'postcomp_sdecsum5',
'precomp_sdecsum5',
'postcomp_sdecavg5',
'precomp_sdecavg5',
'postcomp_sdecdsum',
'precomp_sdecdsum',
'postcomp_sdecdavg',
'precomp_sdecdavg',
'postcomp_sdecdsum3',
'precomp_sdecdsum3',
'postcomp_sdecdavg3',
'precomp_sdecdavg3',
'postcomp_sdecdsum5',
'precomp_sdecdsum5',
'postcomp_sdecdavg5',
'precomp_sdecdavg5',
'postcomp_mdecsum',
'precomp_mdecsum',
'postcomp_mdecavg',
'precomp_mdecavg',
'postcomp_mdecsum3',
'precomp_mdecsum3',
'postcomp_mdecavg3',
'precomp_mdecavg3',
'postcomp_mdecsum5',
'precomp_mdecsum5',
'postcomp_mdecavg5',
'precomp_mdecavg5',
'postcomp_mdecdsum',
'precomp_mdecdsum',
'postcomp_mdecdavg',
'precomp_mdecdavg',
'postcomp_mdecdsum3',
'precomp_mdecdsum3',
'postcomp_mdecdavg3',
'precomp_mdecdavg3',
'postcomp_mdecdsum5',
'precomp_mdecdsum5',
'postcomp_mdecdavg5',
'precomp_mdecdavg5',
'opp_DATE',
'opp_jbout',
'opp_jevent',
'opp_jfighter',
'opp_EVENT',
'opp_BOUT',
'opp_FIGHTER',
'opp_fight_time_minutes',
'opp_precomp_tot_time_in_cage',
'opp_postcomp_tot_time_in_cage',
'opp_age',
'opp_HEIGHT',
'opp_WEIGHT',
'opp_REACH',
'opp_STANCE',
'opp_DOB',
'opp_sex',
'opp_weightindex',
'opp_weight_stat',
'opp_weight_of_fight',
'opp_precomp_weight_avg3',
'opp_postcomp_weight_avg3',
'opp_round',
'opp_time_format',
'opp_win',
'opp_loss',
'opp_kd',
'opp_ko',
'opp_kod',
'opp_subw',
'opp_subwd',
'opp_udec',
'opp_udecd',
'opp_sdec',
'opp_sdecd',
'opp_mdec',
'opp_mdecd',
'opp_subatt',
'opp_postcomp_tot_time_in_cage_3',
'opp_precomp_tot_time_in_cage_3',
'opp_postcomp_tot_time_in_cage_5',
'opp_precomp_tot_time_in_cage_5',
'opp_postcomp_sigstr_pm',
'opp_precomp_sigstr_pm',
'opp_postcomp_sigstr_pm3',
'opp_precomp_sigstr_pm3',
'opp_postcomp_sigstr_pm5',
'opp_precomp_sigstr_pm5',
'opp_postcomp_tdavg',
'opp_precomp_tdavg',
'opp_postcomp_tdavg3',
'opp_precomp_tdavg3',
'opp_postcomp_tdavg5',
'opp_precomp_tdavg5',
'opp_sigstrabs',
'opp_postcomp_sapm',
'opp_precomp_sapm',
'opp_precomp_sapm3',
'opp_postcomp_sapm3',
'opp_precomp_sapm5',
'opp_postcomp_sapm5',
'opp_postcomp_subavg',
'opp_precomp_subavg',
'opp_postcomp_subavg3',
'opp_precomp_subavg3',
'opp_postcomp_subavg5',
'opp_precomp_subavg5',
'opp_tdabs',
'opp_tdattfromopp',
'opp_postcomp_tddef',
'opp_precomp_tddef',
'opp_postcomp_tddef3',
'opp_precomp_tddef3',
'opp_postcomp_tddef5',
'opp_precomp_tddef5',
'opp_ostrabs',
'opp_postcomp_ostrabssum',
'opp_sigstracc',
'opp_sigstratt',
'opp_precomp_sigstraccsum',
'opp_postcomp_sigstraccsum',
'opp_postcomp_sigstr_perc',
'opp_precomp_sigstr_perc',
'opp_precomp_sigstr_perc3',
'opp_postcomp_sigstr_perc3',
'opp_precomp_sigstr_perc5',
'opp_postcomp_sigstr_perc5',
'opp_sigstrattfromopp',
'opp_postcomp_strdef',
'opp_precomp_strdef',
'opp_postcomp_strdef3',
'opp_precomp_strdef3',
'opp_postcomp_strdef5',
'opp_precomp_strdef5',
'opp_tdacc',
'opp_tdatt',
'opp_postcomp_tdacc_perc',
'opp_precomp_tdacc_perc',
'opp_postcomp_tdacc_perc3',
'opp_precomp_tdacc_perc3',
'opp_postcomp_tdacc_perc5',
'opp_precomp_tdacc_perc5',
'opp_totalacc',
'opp_totalatt',
'opp_postcomp_totalacc_perc',
'opp_precomp_totalacc_perc',
'opp_postcomp_totalacc_perc3',
'opp_precomp_totalacc_perc3',
'opp_postcomp_totalacc_perc5',
'opp_precomp_totalacc_perc5',
'opp_headacc',
'opp_headatt',
'opp_postcomp_headacc_perc',
'opp_precomp_headacc_perc',
'opp_postcomp_headacc_perc3',
'opp_precomp_headacc_perc3',
'opp_postcomp_headacc_perc5',
'opp_precomp_headacc_perc5',
'opp_bodyacc',
'opp_bodyatt',
'opp_postcomp_bodyacc_perc',
'opp_precomp_bodyacc_perc',
'opp_postcomp_bodyacc_perc3',
'opp_precomp_bodyacc_perc3',
'opp_postcomp_bodyacc_perc5',
'opp_precomp_bodyacc_perc5',
'opp_legacc',
'opp_legatt',
'opp_postcomp_legacc_perc',
'opp_precomp_legacc_perc',
'opp_postcomp_legacc_perc3',
'opp_precomp_legacc_perc3',
'opp_postcomp_legacc_perc5',
'opp_precomp_legacc_perc5',
'opp_distacc',
'opp_distatt',
'opp_postcomp_distacc_perc',
'opp_precomp_distacc_perc',
'opp_postcomp_distacc_perc3',
'opp_precomp_distacc_perc3',
'opp_postcomp_distacc_perc5',
'opp_precomp_distacc_perc5',
'opp_clinchacc',
'opp_clinchatt',
'opp_postcomp_clinchacc_perc',
'opp_precomp_clinchacc_perc',
'opp_postcomp_clinchacc_perc3',
'opp_precomp_clinchacc_perc3',
'opp_postcomp_clinchacc_perc5',
'opp_precomp_clinchacc_perc5',
'opp_groundacc',
'opp_groundatt',
'opp_postcomp_groundacc_perc',
'opp_precomp_groundacc_perc',
'opp_postcomp_groundacc_perc3',
'opp_precomp_groundacc_perc3',
'opp_postcomp_groundacc_perc5',
'opp_precomp_groundacc_perc5',
'opp_postcomp_winsum',
'opp_precomp_winsum',
'opp_postcomp_boutcount',
'opp_precomp_boutcount',
'opp_postcomp_winavg',
'opp_precomp_winavg',
'opp_postcomp_winsum3',
'opp_precomp_winsum3',
'opp_postcomp_winavg3',
'opp_precomp_winavg3',
'opp_postcomp_winsum5',
'opp_precomp_winsum5',
'opp_postcomp_winavg5',
'opp_precomp_winavg5',
'opp_postcomp_losssum',
'opp_precomp_losssum',
'opp_postcomp_lossavg',
'opp_precomp_lossavg',
'opp_postcomp_losssum3',
'opp_precomp_losssum3',
'opp_postcomp_lossavg3',
'opp_precomp_lossavg3',
'opp_postcomp_losssum5',
'opp_precomp_losssum5',
'opp_postcomp_lossavg5',
'opp_precomp_lossavg5',
'opp_postcomp_kdsum',
'opp_precomp_kdsum',
'opp_postcomp_kdavg',
'opp_precomp_kdavg',
'opp_postcomp_kdsum3',
'opp_precomp_kdsum3',
'opp_postcomp_kdavg3',
'opp_precomp_kdavg3',
'opp_postcomp_kdsum5',
'opp_precomp_kdsum5',
'opp_postcomp_kdavg5',
'opp_precomp_kdavg5',
'opp_postcomp_kosum',
'opp_precomp_kosum',
'opp_postcomp_koavg',
'opp_precomp_koavg',
'opp_postcomp_kosum3',
'opp_precomp_kosum3',
'opp_postcomp_koavg3',
'opp_precomp_koavg3',
'opp_postcomp_kosum5',
'opp_precomp_kosum5',
'opp_postcomp_koavg5',
'opp_precomp_koavg5',
'opp_postcomp_kodsum',
'opp_precomp_kodsum',
'opp_postcomp_kodavg',
'opp_precomp_kodavg',
'opp_postcomp_kodsum3',
'opp_precomp_kodsum3',
'opp_postcomp_kodavg3',
'opp_precomp_kodavg3',
'opp_postcomp_kodsum5',
'opp_precomp_kodsum5',
'opp_postcomp_kodavg5',
'opp_precomp_kodavg5',
'opp_postcomp_subwsum',
'opp_precomp_subwsum',
'opp_postcomp_subwavg',
'opp_precomp_subwavg',
'opp_postcomp_subwsum3',
'opp_precomp_subwsum3',
'opp_postcomp_subwavg3',
'opp_precomp_subwavg3',
'opp_postcomp_subwsum5',
'opp_precomp_subwsum5',
'opp_postcomp_subwavg5',
'opp_precomp_subwavg5',
'opp_postcomp_subwdsum',
'opp_precomp_subwdsum',
'opp_postcomp_subwdavg',
'opp_precomp_subwdavg',
'opp_postcomp_subwdsum3',
'opp_precomp_subwdsum3',
'opp_postcomp_subwdavg3',
'opp_precomp_subwdavg3',
'opp_postcomp_subwdsum5',
'opp_precomp_subwdsum5',
'opp_postcomp_subwdavg5',
'opp_precomp_subwdavg5',
'opp_postcomp_udecsum',
'opp_precomp_udecsum',
'opp_postcomp_udecavg',
'opp_precomp_udecavg',
'opp_postcomp_udecsum3',
'opp_precomp_udecsum3',
'opp_postcomp_udecavg3',
'opp_precomp_udecavg3',
'opp_postcomp_udecsum5',
'opp_precomp_udecsum5',
'opp_postcomp_udecavg5',
'opp_precomp_udecavg5',
'opp_postcomp_udecdsum',
'opp_precomp_udecdsum',
'opp_postcomp_udecdavg',
'opp_precomp_udecdavg',
'opp_postcomp_udecdsum3',
'opp_precomp_udecdsum3',
'opp_postcomp_udecdavg3',
'opp_precomp_udecdavg3',
'opp_postcomp_udecdsum5',
'opp_precomp_udecdsum5',
'opp_postcomp_udecdavg5',
'opp_precomp_udecdavg5',
'opp_postcomp_sdecsum',
'opp_precomp_sdecsum',
'opp_postcomp_sdecavg',
'opp_precomp_sdecavg',
'opp_postcomp_sdecsum3',
'opp_precomp_sdecsum3',
'opp_postcomp_sdecavg3',
'opp_precomp_sdecavg3',
'opp_postcomp_sdecsum5',
'opp_precomp_sdecsum5',
'opp_postcomp_sdecavg5',
'opp_precomp_sdecavg5',
'opp_postcomp_sdecdsum',
'opp_precomp_sdecdsum',
'opp_postcomp_sdecdavg',
'opp_precomp_sdecdavg',
'opp_postcomp_sdecdsum3',
'opp_precomp_sdecdsum3',
'opp_postcomp_sdecdavg3',
'opp_precomp_sdecdavg3',
'opp_postcomp_sdecdsum5',
'opp_precomp_sdecdsum5',
'opp_postcomp_sdecdavg5',
'opp_precomp_sdecdavg5',
'opp_postcomp_mdecsum',
'opp_precomp_mdecsum',
'opp_postcomp_mdecavg',
'opp_precomp_mdecavg',
'opp_postcomp_mdecsum3',
'opp_precomp_mdecsum3',
'opp_postcomp_mdecavg3',
'opp_precomp_mdecavg3',
'opp_postcomp_mdecsum5',
'opp_precomp_mdecsum5',
'opp_postcomp_mdecavg5',
'opp_precomp_mdecavg5',
'opp_postcomp_mdecdsum',
'opp_precomp_mdecdsum',
'opp_postcomp_mdecdavg',
'opp_precomp_mdecdavg',
'opp_postcomp_mdecdsum3',
'opp_precomp_mdecdsum3',
'opp_postcomp_mdecdavg3',
'opp_precomp_mdecdavg3',
'opp_postcomp_mdecdsum5',
'opp_precomp_mdecdsum5',
'opp_postcomp_mdecdavg5',
'opp_precomp_mdecdavg5'
  UNION ALL
SELECT
-- SApM : SApM - Significant Strikes Absorbed per Minute
-- Post Competition
single_fighter_view.DATE,
    single_fighter_view.jbout,
    single_fighter_view.jevent,
    single_fighter_view.jfighter,
    single_fighter_view.EVENT,
    single_fighter_view.BOUT,
    single_fighter_view.FIGHTER,
    single_fighter_view.fight_time_minutes,
    single_fighter_view.precomp_tot_time_in_cage,
    single_fighter_view.postcomp_tot_time_in_cage,
    single_fighter_view.age,
    single_fighter_view.HEIGHT,
    single_fighter_view.WEIGHT,
    single_fighter_view.REACH,
    single_fighter_view.STANCE,
    single_fighter_view.DOB,
    single_fighter_view.sex,
    single_fighter_view.weightindex,
    single_fighter_view.weight_stat,
    single_fighter_view.weight_of_fight,
    single_fighter_view.precomp_weight_avg3,
    single_fighter_view.postcomp_weight_avg3,
    single_fighter_view.round,
    single_fighter_view.time_format,
    single_fighter_view.win,
    single_fighter_view.loss,
    single_fighter_view.kd,
    single_fighter_view.ko,
    single_fighter_view.kod,
    single_fighter_view.subw,
    single_fighter_view.subwd,
    single_fighter_view.udec,
    single_fighter_view.udecd,
    single_fighter_view.sdec,
    single_fighter_view.sdecd,
    single_fighter_view.mdec,
    single_fighter_view.mdecd,
    single_fighter_view.subatt,
    single_fighter_view.postcomp_tot_time_in_cage_3,
    single_fighter_view.precomp_tot_time_in_cage_3,
    single_fighter_view.postcomp_tot_time_in_cage_5,
    single_fighter_view.precomp_tot_time_in_cage_5,
    single_fighter_view.postcomp_sigstr_pm,
    single_fighter_view.precomp_sigstr_pm,
    single_fighter_view.postcomp_sigstr_pm3,
    single_fighter_view.precomp_sigstr_pm3,
    single_fighter_view.postcomp_sigstr_pm5,
    single_fighter_view.precomp_sigstr_pm5,
    single_fighter_view.postcomp_tdavg,
    single_fighter_view.precomp_tdavg,
    single_fighter_view.postcomp_tdavg3,
    single_fighter_view.precomp_tdavg3,
    single_fighter_view.postcomp_tdavg5,
    single_fighter_view.precomp_tdavg5,
    single_fighter_view.sigstrabs,
    single_fighter_view.postcomp_sapm,
    single_fighter_view.precomp_sapm,
    single_fighter_view.precomp_sapm3,
    single_fighter_view.postcomp_sapm3,
    single_fighter_view.precomp_sapm5,
    single_fighter_view.postcomp_sapm5,
    single_fighter_view.postcomp_subavg,
    single_fighter_view.precomp_subavg,
    single_fighter_view.postcomp_subavg3,
    single_fighter_view.precomp_subavg3,
    single_fighter_view.postcomp_subavg5,
    single_fighter_view.precomp_subavg5,
    single_fighter_view.tdabs,
    single_fighter_view.tdattfromopp,
    single_fighter_view.postcomp_tddef,
    single_fighter_view.precomp_tddef,
    single_fighter_view.postcomp_tddef3,
    single_fighter_view.precomp_tddef3,
    single_fighter_view.postcomp_tddef5,
    single_fighter_view.precomp_tddef5,
    single_fighter_view.ostrabs,
    single_fighter_view.postcomp_ostrabssum,
    single_fighter_view.sigstracc,
    single_fighter_view.sigstratt,
    single_fighter_view.precomp_sigstraccsum,
    single_fighter_view.postcomp_sigstraccsum,
    single_fighter_view.postcomp_sigstr_perc,
    single_fighter_view.precomp_sigstr_perc,
    single_fighter_view.precomp_sigstr_perc3,
    single_fighter_view.postcomp_sigstr_perc3,
    single_fighter_view.precomp_sigstr_perc5,
    single_fighter_view.postcomp_sigstr_perc5,
    single_fighter_view.sigstrattfromopp,
    single_fighter_view.postcomp_strdef,
    single_fighter_view.precomp_strdef,
    single_fighter_view.postcomp_strdef3,
    single_fighter_view.precomp_strdef3,
    single_fighter_view.postcomp_strdef5,
    single_fighter_view.precomp_strdef5,
    single_fighter_view.tdacc,
    single_fighter_view.tdatt,
    single_fighter_view.postcomp_tdacc_perc,
    single_fighter_view.precomp_tdacc_perc,
    single_fighter_view.postcomp_tdacc_perc3,
    single_fighter_view.precomp_tdacc_perc3,
    single_fighter_view.postcomp_tdacc_perc5,
    single_fighter_view.precomp_tdacc_perc5,
    single_fighter_view.totalacc,
    single_fighter_view.totalatt,
    single_fighter_view.postcomp_totalacc_perc,
    single_fighter_view.precomp_totalacc_perc,
    single_fighter_view.postcomp_totalacc_perc3,
    single_fighter_view.precomp_totalacc_perc3,
    single_fighter_view.postcomp_totalacc_perc5,
    single_fighter_view.precomp_totalacc_perc5,
    single_fighter_view.headacc,
    single_fighter_view.headatt,
    single_fighter_view.postcomp_headacc_perc,
    single_fighter_view.precomp_headacc_perc,
    single_fighter_view.postcomp_headacc_perc3,
    single_fighter_view.precomp_headacc_perc3,
    single_fighter_view.postcomp_headacc_perc5,
    single_fighter_view.precomp_headacc_perc5,
    single_fighter_view.bodyacc,
    single_fighter_view.bodyatt,
    single_fighter_view.postcomp_bodyacc_perc,
    single_fighter_view.precomp_bodyacc_perc,
    single_fighter_view.postcomp_bodyacc_perc3,
    single_fighter_view.precomp_bodyacc_perc3,
    single_fighter_view.postcomp_bodyacc_perc5,
    single_fighter_view.precomp_bodyacc_perc5,
    single_fighter_view.legacc,
    single_fighter_view.legatt,
    single_fighter_view.postcomp_legacc_perc,
    single_fighter_view.precomp_legacc_perc,
    single_fighter_view.postcomp_legacc_perc3,
    single_fighter_view.precomp_legacc_perc3,
    single_fighter_view.postcomp_legacc_perc5,
    single_fighter_view.precomp_legacc_perc5,
    single_fighter_view.distacc,
    single_fighter_view.distatt,
    single_fighter_view.postcomp_distacc_perc,
    single_fighter_view.precomp_distacc_perc,
    single_fighter_view.postcomp_distacc_perc3,
    single_fighter_view.precomp_distacc_perc3,
    single_fighter_view.postcomp_distacc_perc5,
    single_fighter_view.precomp_distacc_perc5,
    single_fighter_view.clinchacc,
    single_fighter_view.clinchatt,
    single_fighter_view.postcomp_clinchacc_perc,
    single_fighter_view.precomp_clinchacc_perc,
    single_fighter_view.postcomp_clinchacc_perc3,
    single_fighter_view.precomp_clinchacc_perc3,
    single_fighter_view.postcomp_clinchacc_perc5,
    single_fighter_view.precomp_clinchacc_perc5,
    single_fighter_view.groundacc,
    single_fighter_view.groundatt,
    single_fighter_view.postcomp_groundacc_perc,
    single_fighter_view.precomp_groundacc_perc,
    single_fighter_view.postcomp_groundacc_perc3,
    single_fighter_view.precomp_groundacc_perc3,
    single_fighter_view.postcomp_groundacc_perc5,
    single_fighter_view.precomp_groundacc_perc5,
    single_fighter_view.postcomp_winsum,
    single_fighter_view.precomp_winsum,
    single_fighter_view.postcomp_boutcount,
    single_fighter_view.precomp_boutcount,
    single_fighter_view.postcomp_winavg,
    single_fighter_view.precomp_winavg,
    single_fighter_view.postcomp_winsum3,
    single_fighter_view.precomp_winsum3,
    single_fighter_view.postcomp_winavg3,
    single_fighter_view.precomp_winavg3,
    single_fighter_view.postcomp_winsum5,
    single_fighter_view.precomp_winsum5,
    single_fighter_view.postcomp_winavg5,
    single_fighter_view.precomp_winavg5,
    single_fighter_view.postcomp_losssum,
    single_fighter_view.precomp_losssum,
    single_fighter_view.postcomp_lossavg,
    single_fighter_view.precomp_lossavg,
    single_fighter_view.postcomp_losssum3,
    single_fighter_view.precomp_losssum3,
    single_fighter_view.postcomp_lossavg3,
    single_fighter_view.precomp_lossavg3,
    single_fighter_view.postcomp_losssum5,
    single_fighter_view.precomp_losssum5,
    single_fighter_view.postcomp_lossavg5,
    single_fighter_view.precomp_lossavg5,
    single_fighter_view.postcomp_kdsum,
    single_fighter_view.precomp_kdsum,
    single_fighter_view.postcomp_kdavg,
    single_fighter_view.precomp_kdavg,
    single_fighter_view.postcomp_kdsum3,
    single_fighter_view.precomp_kdsum3,
    single_fighter_view.postcomp_kdavg3,
    single_fighter_view.precomp_kdavg3,
    single_fighter_view.postcomp_kdsum5,
    single_fighter_view.precomp_kdsum5,
    single_fighter_view.postcomp_kdavg5,
    single_fighter_view.precomp_kdavg5,
    single_fighter_view.postcomp_kosum,
    single_fighter_view.precomp_kosum,
    single_fighter_view.postcomp_koavg,
    single_fighter_view.precomp_koavg,
    single_fighter_view.postcomp_kosum3,
    single_fighter_view.precomp_kosum3,
    single_fighter_view.postcomp_koavg3,
    single_fighter_view.precomp_koavg3,
    single_fighter_view.postcomp_kosum5,
    single_fighter_view.precomp_kosum5,
    single_fighter_view.postcomp_koavg5,
    single_fighter_view.precomp_koavg5,
    single_fighter_view.postcomp_kodsum,
    single_fighter_view.precomp_kodsum,
    single_fighter_view.postcomp_kodavg,
    single_fighter_view.precomp_kodavg,
    single_fighter_view.postcomp_kodsum3,
    single_fighter_view.precomp_kodsum3,
    single_fighter_view.postcomp_kodavg3,
    single_fighter_view.precomp_kodavg3,
    single_fighter_view.postcomp_kodsum5,
    single_fighter_view.precomp_kodsum5,
    single_fighter_view.postcomp_kodavg5,
    single_fighter_view.precomp_kodavg5,
    single_fighter_view.postcomp_subwsum,
    single_fighter_view.precomp_subwsum,
    single_fighter_view.postcomp_subwavg,
    single_fighter_view.precomp_subwavg,
    single_fighter_view.postcomp_subwsum3,
    single_fighter_view.precomp_subwsum3,
    single_fighter_view.postcomp_subwavg3,
    single_fighter_view.precomp_subwavg3,
    single_fighter_view.postcomp_subwsum5,
    single_fighter_view.precomp_subwsum5,
    single_fighter_view.postcomp_subwavg5,
    single_fighter_view.precomp_subwavg5,
    single_fighter_view.postcomp_subwdsum,
    single_fighter_view.precomp_subwdsum,
    single_fighter_view.postcomp_subwdavg,
    single_fighter_view.precomp_subwdavg,
    single_fighter_view.postcomp_subwdsum3,
    single_fighter_view.precomp_subwdsum3,
    single_fighter_view.postcomp_subwdavg3,
    single_fighter_view.precomp_subwdavg3,
    single_fighter_view.postcomp_subwdsum5,
    single_fighter_view.precomp_subwdsum5,
    single_fighter_view.postcomp_subwdavg5,
    single_fighter_view.precomp_subwdavg5,
    single_fighter_view.postcomp_udecsum,
    single_fighter_view.precomp_udecsum,
    single_fighter_view.postcomp_udecavg,
    single_fighter_view.precomp_udecavg,
    single_fighter_view.postcomp_udecsum3,
    single_fighter_view.precomp_udecsum3,
    single_fighter_view.postcomp_udecavg3,
    single_fighter_view.precomp_udecavg3,
    single_fighter_view.postcomp_udecsum5,
    single_fighter_view.precomp_udecsum5,
    single_fighter_view.postcomp_udecavg5,
    single_fighter_view.precomp_udecavg5,
    single_fighter_view.postcomp_udecdsum,
    single_fighter_view.precomp_udecdsum,
    single_fighter_view.postcomp_udecdavg,
    single_fighter_view.precomp_udecdavg,
    single_fighter_view.postcomp_udecdsum3,
    single_fighter_view.precomp_udecdsum3,
    single_fighter_view.postcomp_udecdavg3,
    single_fighter_view.precomp_udecdavg3,
    single_fighter_view.postcomp_udecdsum5,
    single_fighter_view.precomp_udecdsum5,
    single_fighter_view.postcomp_udecdavg5,
    single_fighter_view.precomp_udecdavg5,
    single_fighter_view.postcomp_sdecsum,
    single_fighter_view.precomp_sdecsum,
    single_fighter_view.postcomp_sdecavg,
    single_fighter_view.precomp_sdecavg,
    single_fighter_view.postcomp_sdecsum3,
    single_fighter_view.precomp_sdecsum3,
    single_fighter_view.postcomp_sdecavg3,
    single_fighter_view.precomp_sdecavg3,
    single_fighter_view.postcomp_sdecsum5,
    single_fighter_view.precomp_sdecsum5,
    single_fighter_view.postcomp_sdecavg5,
    single_fighter_view.precomp_sdecavg5,
    single_fighter_view.postcomp_sdecdsum,
    single_fighter_view.precomp_sdecdsum,
    single_fighter_view.postcomp_sdecdavg,
    single_fighter_view.precomp_sdecdavg,
    single_fighter_view.postcomp_sdecdsum3,
    single_fighter_view.precomp_sdecdsum3,
    single_fighter_view.postcomp_sdecdavg3,
    single_fighter_view.precomp_sdecdavg3,
    single_fighter_view.postcomp_sdecdsum5,
    single_fighter_view.precomp_sdecdsum5,
    single_fighter_view.postcomp_sdecdavg5,
    single_fighter_view.precomp_sdecdavg5,
    single_fighter_view.postcomp_mdecsum,
    single_fighter_view.precomp_mdecsum,
    single_fighter_view.postcomp_mdecavg,
    single_fighter_view.precomp_mdecavg,
    single_fighter_view.postcomp_mdecsum3,
    single_fighter_view.precomp_mdecsum3,
    single_fighter_view.postcomp_mdecavg3,
    single_fighter_view.precomp_mdecavg3,
    single_fighter_view.postcomp_mdecsum5,
    single_fighter_view.precomp_mdecsum5,
    single_fighter_view.postcomp_mdecavg5,
    single_fighter_view.precomp_mdecavg5,
    single_fighter_view.postcomp_mdecdsum,
    single_fighter_view.precomp_mdecdsum,
    single_fighter_view.postcomp_mdecdavg,
    single_fighter_view.precomp_mdecdavg,
    single_fighter_view.postcomp_mdecdsum3,
    single_fighter_view.precomp_mdecdsum3,
    single_fighter_view.postcomp_mdecdavg3,
    single_fighter_view.precomp_mdecdavg3,
    single_fighter_view.postcomp_mdecdsum5,
    single_fighter_view.precomp_mdecdsum5,
    single_fighter_view.postcomp_mdecdavg5,
    single_fighter_view.precomp_mdecdavg5,
    single_opponent_view.DATE as opp_DATE,
    single_opponent_view.jbout as opp_jbout,
    single_opponent_view.jevent as opp_jevent,
    single_opponent_view.jfighter as opp_jfighter,
    single_opponent_view.EVENT as opp_EVENT,
    single_opponent_view.BOUT as opp_BOUT,
    single_opponent_view.FIGHTER as opp_FIGHTER,
    single_opponent_view.fight_time_minutes as opp_fight_time_minutes,
    single_opponent_view.precomp_tot_time_in_cage as opp_precomp_tot_time_in_cage,
    single_opponent_view.postcomp_tot_time_in_cage as opp_postcomp_tot_time_in_cage,
    single_opponent_view.age as opp_age,
    single_opponent_view.HEIGHT as opp_HEIGHT,
    single_opponent_view.WEIGHT as opp_WEIGHT,
    single_opponent_view.REACH as opp_REACH,
    single_opponent_view.STANCE as opp_STANCE,
    single_opponent_view.DOB as opp_DOB,
    single_opponent_view.sex as opp_sex,
    single_opponent_view.weightindex as opp_weightindex,
    single_opponent_view.weight_stat as opp_weight_stat,
    single_opponent_view.weight_of_fight as opp_weight_of_fight,
    single_opponent_view.precomp_weight_avg3 as opp_precomp_weight_avg3,
    single_opponent_view.postcomp_weight_avg3 as opp_postcomp_weight_avg3,
    single_opponent_view.round as opp_round,
    single_opponent_view.time_format as opp_time_format,
    single_opponent_view.win as opp_win,
    single_opponent_view.loss as opp_loss,
    single_opponent_view.kd as opp_kd,
    single_opponent_view.ko as opp_ko,
    single_opponent_view.kod as opp_kod,
    single_opponent_view.subw as opp_subw,
    single_opponent_view.subwd as opp_subwd,
    single_opponent_view.udec as opp_udec,
    single_opponent_view.udecd as opp_udecd,
    single_opponent_view.sdec as opp_sdec,
    single_opponent_view.sdecd as opp_sdecd,
    single_opponent_view.mdec as opp_mdec,
    single_opponent_view.mdecd as opp_mdecd,
    single_opponent_view.subatt as opp_subatt,
    single_opponent_view.postcomp_tot_time_in_cage_3 as opp_postcomp_tot_time_in_cage_3,
    single_opponent_view.precomp_tot_time_in_cage_3 as opp_precomp_tot_time_in_cage_3,
    single_opponent_view.postcomp_tot_time_in_cage_5 as opp_postcomp_tot_time_in_cage_5,
    single_opponent_view.precomp_tot_time_in_cage_5 as opp_precomp_tot_time_in_cage_5,
    single_opponent_view.postcomp_sigstr_pm as opp_postcomp_sigstr_pm,
    single_opponent_view.precomp_sigstr_pm as opp_precomp_sigstr_pm,
    single_opponent_view.postcomp_sigstr_pm3 as opp_postcomp_sigstr_pm3,
    single_opponent_view.precomp_sigstr_pm3 as opp_precomp_sigstr_pm3,
    single_opponent_view.postcomp_sigstr_pm5 as opp_postcomp_sigstr_pm5,
    single_opponent_view.precomp_sigstr_pm5 as opp_precomp_sigstr_pm5,
    single_opponent_view.postcomp_tdavg as opp_postcomp_tdavg,
    single_opponent_view.precomp_tdavg as opp_precomp_tdavg,
    single_opponent_view.postcomp_tdavg3 as opp_postcomp_tdavg3,
    single_opponent_view.precomp_tdavg3 as opp_precomp_tdavg3,
    single_opponent_view.postcomp_tdavg5 as opp_postcomp_tdavg5,
    single_opponent_view.precomp_tdavg5 as opp_precomp_tdavg5,
    single_opponent_view.sigstrabs as opp_sigstrabs,
    single_opponent_view.postcomp_sapm as opp_postcomp_sapm,
    single_opponent_view.precomp_sapm as opp_precomp_sapm,
    single_opponent_view.precomp_sapm3 as opp_precomp_sapm3,
    single_opponent_view.postcomp_sapm3 as opp_postcomp_sapm3,
    single_opponent_view.precomp_sapm5 as opp_precomp_sapm5,
    single_opponent_view.postcomp_sapm5 as opp_postcomp_sapm5,
    single_opponent_view.postcomp_subavg as opp_postcomp_subavg,
    single_opponent_view.precomp_subavg as opp_precomp_subavg,
    single_opponent_view.postcomp_subavg3 as opp_postcomp_subavg3,
    single_opponent_view.precomp_subavg3 as opp_precomp_subavg3,
    single_opponent_view.postcomp_subavg5 as opp_postcomp_subavg5,
    single_opponent_view.precomp_subavg5 as opp_precomp_subavg5,
    single_opponent_view.tdabs as opp_tdabs,
    single_opponent_view.tdattfromopp as opp_tdattfromopp,
    single_opponent_view.postcomp_tddef as opp_postcomp_tddef,
    single_opponent_view.precomp_tddef as opp_precomp_tddef,
    single_opponent_view.postcomp_tddef3 as opp_postcomp_tddef3,
    single_opponent_view.precomp_tddef3 as opp_precomp_tddef3,
    single_opponent_view.postcomp_tddef5 as opp_postcomp_tddef5,
    single_opponent_view.precomp_tddef5 as opp_precomp_tddef5,
    single_opponent_view.ostrabs as opp_ostrabs,
    single_opponent_view.postcomp_ostrabssum as opp_postcomp_ostrabssum,
    single_opponent_view.sigstracc as opp_sigstracc,
    single_opponent_view.sigstratt as opp_sigstratt,
    single_opponent_view.precomp_sigstraccsum as opp_precomp_sigstraccsum,
    single_opponent_view.postcomp_sigstraccsum as opp_postcomp_sigstraccsum,
    single_opponent_view.postcomp_sigstr_perc as opp_postcomp_sigstr_perc,
    single_opponent_view.precomp_sigstr_perc as opp_precomp_sigstr_perc,
    single_opponent_view.precomp_sigstr_perc3 as opp_precomp_sigstr_perc3,
    single_opponent_view.postcomp_sigstr_perc3 as opp_postcomp_sigstr_perc3,
    single_opponent_view.precomp_sigstr_perc5 as opp_precomp_sigstr_perc5,
    single_opponent_view.postcomp_sigstr_perc5 as opp_postcomp_sigstr_perc5,
    single_opponent_view.sigstrattfromopp as opp_sigstrattfromopp,
    single_opponent_view.postcomp_strdef as opp_postcomp_strdef,
    single_opponent_view.precomp_strdef as opp_precomp_strdef,
    single_opponent_view.postcomp_strdef3 as opp_postcomp_strdef3,
    single_opponent_view.precomp_strdef3 as opp_precomp_strdef3,
    single_opponent_view.postcomp_strdef5 as opp_postcomp_strdef5,
    single_opponent_view.precomp_strdef5 as opp_precomp_strdef5,
    single_opponent_view.tdacc as opp_tdacc,
    single_opponent_view.tdatt as opp_tdatt,
    single_opponent_view.postcomp_tdacc_perc as opp_postcomp_tdacc_perc,
    single_opponent_view.precomp_tdacc_perc as opp_precomp_tdacc_perc,
    single_opponent_view.postcomp_tdacc_perc3 as opp_postcomp_tdacc_perc3,
    single_opponent_view.precomp_tdacc_perc3 as opp_precomp_tdacc_perc3,
    single_opponent_view.postcomp_tdacc_perc5 as opp_postcomp_tdacc_perc5,
    single_opponent_view.precomp_tdacc_perc5 as opp_precomp_tdacc_perc5,
    single_opponent_view.totalacc as opp_totalacc,
    single_opponent_view.totalatt as opp_totalatt,
    single_opponent_view.postcomp_totalacc_perc as opp_postcomp_totalacc_perc,
    single_opponent_view.precomp_totalacc_perc as opp_precomp_totalacc_perc,
    single_opponent_view.postcomp_totalacc_perc3 as opp_postcomp_totalacc_perc3,
    single_opponent_view.precomp_totalacc_perc3 as opp_precomp_totalacc_perc3,
    single_opponent_view.postcomp_totalacc_perc5 as opp_postcomp_totalacc_perc5,
    single_opponent_view.precomp_totalacc_perc5 as opp_precomp_totalacc_perc5,
    single_opponent_view.headacc as opp_headacc,
    single_opponent_view.headatt as opp_headatt,
    single_opponent_view.postcomp_headacc_perc as opp_postcomp_headacc_perc,
    single_opponent_view.precomp_headacc_perc as opp_precomp_headacc_perc,
    single_opponent_view.postcomp_headacc_perc3 as opp_postcomp_headacc_perc3,
    single_opponent_view.precomp_headacc_perc3 as opp_precomp_headacc_perc3,
    single_opponent_view.postcomp_headacc_perc5 as opp_postcomp_headacc_perc5,
    single_opponent_view.precomp_headacc_perc5 as opp_precomp_headacc_perc5,
    single_opponent_view.bodyacc as opp_bodyacc,
    single_opponent_view.bodyatt as opp_bodyatt,
    single_opponent_view.postcomp_bodyacc_perc as opp_postcomp_bodyacc_perc,
    single_opponent_view.precomp_bodyacc_perc as opp_precomp_bodyacc_perc,
    single_opponent_view.postcomp_bodyacc_perc3 as opp_postcomp_bodyacc_perc3,
    single_opponent_view.precomp_bodyacc_perc3 as opp_precomp_bodyacc_perc3,
    single_opponent_view.postcomp_bodyacc_perc5 as opp_postcomp_bodyacc_perc5,
    single_opponent_view.precomp_bodyacc_perc5 as opp_precomp_bodyacc_perc5,
    single_opponent_view.legacc as opp_legacc,
    single_opponent_view.legatt as opp_legatt,
    single_opponent_view.postcomp_legacc_perc as opp_postcomp_legacc_perc,
    single_opponent_view.precomp_legacc_perc as opp_precomp_legacc_perc,
    single_opponent_view.postcomp_legacc_perc3 as opp_postcomp_legacc_perc3,
    single_opponent_view.precomp_legacc_perc3 as opp_precomp_legacc_perc3,
    single_opponent_view.postcomp_legacc_perc5 as opp_postcomp_legacc_perc5,
    single_opponent_view.precomp_legacc_perc5 as opp_precomp_legacc_perc5,
    single_opponent_view.distacc as opp_distacc,
    single_opponent_view.distatt as opp_distatt,
    single_opponent_view.postcomp_distacc_perc as opp_postcomp_distacc_perc,
    single_opponent_view.precomp_distacc_perc as opp_precomp_distacc_perc,
    single_opponent_view.postcomp_distacc_perc3 as opp_postcomp_distacc_perc3,
    single_opponent_view.precomp_distacc_perc3 as opp_precomp_distacc_perc3,
    single_opponent_view.postcomp_distacc_perc5 as opp_postcomp_distacc_perc5,
    single_opponent_view.precomp_distacc_perc5 as opp_precomp_distacc_perc5,
    single_opponent_view.clinchacc as opp_clinchacc,
    single_opponent_view.clinchatt as opp_clinchatt,
    single_opponent_view.postcomp_clinchacc_perc as opp_postcomp_clinchacc_perc,
    single_opponent_view.precomp_clinchacc_perc as opp_precomp_clinchacc_perc,
    single_opponent_view.postcomp_clinchacc_perc3 as opp_postcomp_clinchacc_perc3,
    single_opponent_view.precomp_clinchacc_perc3 as opp_precomp_clinchacc_perc3,
    single_opponent_view.postcomp_clinchacc_perc5 as opp_postcomp_clinchacc_perc5,
    single_opponent_view.precomp_clinchacc_perc5 as opp_precomp_clinchacc_perc5,
    single_opponent_view.groundacc as opp_groundacc,
    single_opponent_view.groundatt as opp_groundatt,
    single_opponent_view.postcomp_groundacc_perc as opp_postcomp_groundacc_perc,
    single_opponent_view.precomp_groundacc_perc as opp_precomp_groundacc_perc,
    single_opponent_view.postcomp_groundacc_perc3 as opp_postcomp_groundacc_perc3,
    single_opponent_view.precomp_groundacc_perc3 as opp_precomp_groundacc_perc3,
    single_opponent_view.postcomp_groundacc_perc5 as opp_postcomp_groundacc_perc5,
    single_opponent_view.precomp_groundacc_perc5 as opp_precomp_groundacc_perc5,
    single_opponent_view.postcomp_winsum as opp_postcomp_winsum,
    single_opponent_view.precomp_winsum as opp_precomp_winsum,
    single_opponent_view.postcomp_boutcount as opp_postcomp_boutcount,
    single_opponent_view.precomp_boutcount as opp_precomp_boutcount,
    single_opponent_view.postcomp_winavg as opp_postcomp_winavg,
    single_opponent_view.precomp_winavg as opp_precomp_winavg,
    single_opponent_view.postcomp_winsum3 as opp_postcomp_winsum3,
    single_opponent_view.precomp_winsum3 as opp_precomp_winsum3,
    single_opponent_view.postcomp_winavg3 as opp_postcomp_winavg3,
    single_opponent_view.precomp_winavg3 as opp_precomp_winavg3,
    single_opponent_view.postcomp_winsum5 as opp_postcomp_winsum5,
    single_opponent_view.precomp_winsum5 as opp_precomp_winsum5,
    single_opponent_view.postcomp_winavg5 as opp_postcomp_winavg5,
    single_opponent_view.precomp_winavg5 as opp_precomp_winavg5,
    single_opponent_view.postcomp_losssum as opp_postcomp_losssum,
    single_opponent_view.precomp_losssum as opp_precomp_losssum,
    single_opponent_view.postcomp_lossavg as opp_postcomp_lossavg,
    single_opponent_view.precomp_lossavg as opp_precomp_lossavg,
    single_opponent_view.postcomp_losssum3 as opp_postcomp_losssum3,
    single_opponent_view.precomp_losssum3 as opp_precomp_losssum3,
    single_opponent_view.postcomp_lossavg3 as opp_postcomp_lossavg3,
    single_opponent_view.precomp_lossavg3 as opp_precomp_lossavg3,
    single_opponent_view.postcomp_losssum5 as opp_postcomp_losssum5,
    single_opponent_view.precomp_losssum5 as opp_precomp_losssum5,
    single_opponent_view.postcomp_lossavg5 as opp_postcomp_lossavg5,
    single_opponent_view.precomp_lossavg5 as opp_precomp_lossavg5,
    single_opponent_view.postcomp_kdsum as opp_postcomp_kdsum,
    single_opponent_view.precomp_kdsum as opp_precomp_kdsum,
    single_opponent_view.postcomp_kdavg as opp_postcomp_kdavg,
    single_opponent_view.precomp_kdavg as opp_precomp_kdavg,
    single_opponent_view.postcomp_kdsum3 as opp_postcomp_kdsum3,
    single_opponent_view.precomp_kdsum3 as opp_precomp_kdsum3,
    single_opponent_view.postcomp_kdavg3 as opp_postcomp_kdavg3,
    single_opponent_view.precomp_kdavg3 as opp_precomp_kdavg3,
    single_opponent_view.postcomp_kdsum5 as opp_postcomp_kdsum5,
    single_opponent_view.precomp_kdsum5 as opp_precomp_kdsum5,
    single_opponent_view.postcomp_kdavg5 as opp_postcomp_kdavg5,
    single_opponent_view.precomp_kdavg5 as opp_precomp_kdavg5,
    single_opponent_view.postcomp_kosum as opp_postcomp_kosum,
    single_opponent_view.precomp_kosum as opp_precomp_kosum,
    single_opponent_view.postcomp_koavg as opp_postcomp_koavg,
    single_opponent_view.precomp_koavg as opp_precomp_koavg,
    single_opponent_view.postcomp_kosum3 as opp_postcomp_kosum3,
    single_opponent_view.precomp_kosum3 as opp_precomp_kosum3,
    single_opponent_view.postcomp_koavg3 as opp_postcomp_koavg3,
    single_opponent_view.precomp_koavg3 as opp_precomp_koavg3,
    single_opponent_view.postcomp_kosum5 as opp_postcomp_kosum5,
    single_opponent_view.precomp_kosum5 as opp_precomp_kosum5,
    single_opponent_view.postcomp_koavg5 as opp_postcomp_koavg5,
    single_opponent_view.precomp_koavg5 as opp_precomp_koavg5,
    single_opponent_view.postcomp_kodsum as opp_postcomp_kodsum,
    single_opponent_view.precomp_kodsum as opp_precomp_kodsum,
    single_opponent_view.postcomp_kodavg as opp_postcomp_kodavg,
    single_opponent_view.precomp_kodavg as opp_precomp_kodavg,
    single_opponent_view.postcomp_kodsum3 as opp_postcomp_kodsum3,
    single_opponent_view.precomp_kodsum3 as opp_precomp_kodsum3,
    single_opponent_view.postcomp_kodavg3 as opp_postcomp_kodavg3,
    single_opponent_view.precomp_kodavg3 as opp_precomp_kodavg3,
    single_opponent_view.postcomp_kodsum5 as opp_postcomp_kodsum5,
    single_opponent_view.precomp_kodsum5 as opp_precomp_kodsum5,
    single_opponent_view.postcomp_kodavg5 as opp_postcomp_kodavg5,
    single_opponent_view.precomp_kodavg5 as opp_precomp_kodavg5,
    single_opponent_view.postcomp_subwsum as opp_postcomp_subwsum,
    single_opponent_view.precomp_subwsum as opp_precomp_subwsum,
    single_opponent_view.postcomp_subwavg as opp_postcomp_subwavg,
    single_opponent_view.precomp_subwavg as opp_precomp_subwavg,
    single_opponent_view.postcomp_subwsum3 as opp_postcomp_subwsum3,
    single_opponent_view.precomp_subwsum3 as opp_precomp_subwsum3,
    single_opponent_view.postcomp_subwavg3 as opp_postcomp_subwavg3,
    single_opponent_view.precomp_subwavg3 as opp_precomp_subwavg3,
    single_opponent_view.postcomp_subwsum5 as opp_postcomp_subwsum5,
    single_opponent_view.precomp_subwsum5 as opp_precomp_subsum5,
    single_opponent_view.postcomp_subwavg5 as opp_postcomp_subwavg5,
    single_opponent_view.precomp_subwavg5 as opp_precomp_subwavg5,
    single_opponent_view.postcomp_subwdsum as opp_postcomp_subwdsum,
    single_opponent_view.precomp_subwdsum as opp_precomp_subwdsum,
    single_opponent_view.postcomp_subwdavg as opp_postcomp_subwdavg,
    single_opponent_view.precomp_subwdavg as opp_precomp_subwdavg,
    single_opponent_view.postcomp_subwdsum3 as opp_postcomp_subwdsum3,
    single_opponent_view.precomp_subwdsum3 as opp_precomp_subwdsum3,
    single_opponent_view.postcomp_subwdavg3 as opp_postcomp_subwdavg3,
    single_opponent_view.precomp_subwdavg3 as opp_precomp_subwdavg3,
    single_opponent_view.postcomp_subwdsum5 as opp_postcomp_subwdsum5,
    single_opponent_view.precomp_subwdsum5 as opp_precomp_subwdsum5,
    single_opponent_view.postcomp_subwdavg5 as opp_postcomp_subwdavg5,
    single_opponent_view.precomp_subwdavg5 as opp_precomp_subwdavg5,
    single_opponent_view.postcomp_udecsum as opp_postcomp_udecsum,
    single_opponent_view.precomp_udecsum as opp_precomp_udecsum,
    single_opponent_view.postcomp_udecavg as opp_postcomp_udecavg,
    single_opponent_view.precomp_udecavg as opp_precomp_udecavg,
    single_opponent_view.postcomp_udecsum3 as opp_postcomp_udecsum3,
    single_opponent_view.precomp_udecsum3 as opp_precomp_udecsum3,
    single_opponent_view.postcomp_udecavg3 as opp_postcomp_udecavg3,
    single_opponent_view.precomp_udecavg3 as opp_precomp_udecavg3,
    single_opponent_view.postcomp_udecsum5 as opp_postcomp_udecsum5,
    single_opponent_view.precomp_udecsum5 as opp_precomp_udecsum5,
    single_opponent_view.postcomp_udecavg5 as opp_postcomp_udecavg5,
    single_opponent_view.precomp_udecavg5 as opp_precomp_udecavg5,
    single_opponent_view.postcomp_udecdsum as opp_postcomp_udecdsum,
    single_opponent_view.precomp_udecdsum as opp_precomp_udecdsum,
    single_opponent_view.postcomp_udecdavg as opp_postcomp_udecdavg,
    single_opponent_view.precomp_udecdavg as opp_precomp_udecdavg,
    single_opponent_view.postcomp_udecdsum3 as opp_postcomp_udecdsum3,
    single_opponent_view.precomp_udecdsum3 as opp_precomp_udecdsum3,
    single_opponent_view.postcomp_udecdavg3 as opp_postcomp_udecdavg3,
    single_opponent_view.precomp_udecdavg3 as opp_precomp_udecdavg3,
    single_opponent_view.postcomp_udecdsum5 as opp_postcomp_udecdsum5,
    single_opponent_view.precomp_udecdsum5 as opp_precomp_udecdsum5,
    single_opponent_view.postcomp_udecdavg5 as opp_postcomp_udecdavg5,
    single_opponent_view.precomp_udecdavg5 as opp_precomp_udecdavg5,
    single_opponent_view.postcomp_sdecsum as opp_postcomp_sdecsum,
    single_opponent_view.precomp_sdecsum as opp_precomp_sdecsum,
    single_opponent_view.postcomp_sdecavg as opp_postcomp_sdecavg,
    single_opponent_view.precomp_sdecavg as opp_precomp_sdecavg,
    single_opponent_view.postcomp_sdecsum3 as opp_postcomp_sdecsum3,
    single_opponent_view.precomp_sdecsum3 as opp_precomp_sdecsum3,
    single_opponent_view.postcomp_sdecavg3 as opp_postcomp_sdecavg3,
    single_opponent_view.precomp_sdecavg3 as opp_precomp_sdecavg3,
    single_opponent_view.postcomp_sdecsum5 as opp_postcomp_sdecsum5,
    single_opponent_view.precomp_sdecsum5 as opp_precomp_sdecsum5,
    single_opponent_view.postcomp_sdecavg5 as opp_postcomp_sdecavg5,
    single_opponent_view.precomp_sdecavg5 as opp_precomp_sdecavg5,
    single_opponent_view.postcomp_sdecdsum as opp_postcomp_sdecdsum,
    single_opponent_view.precomp_sdecdsum as opp_precomp_sdecdsum,
    single_opponent_view.postcomp_sdecdavg as opp_postcomp_sdecdavg,
    single_opponent_view.precomp_sdecdavg as opp_precomp_sdecdavg,
    single_opponent_view.postcomp_sdecdsum3 as opp_postcomp_sdecdsum3,
    single_opponent_view.precomp_sdecdsum3 as opp_precomp_sdecdsum3,
    single_opponent_view.postcomp_sdecdavg3 as opp_postcomp_sdecdavg3,
    single_opponent_view.precomp_sdecdavg3 as opp_precomp_sdecdavg3,
    single_opponent_view.postcomp_sdecdsum5 as opp_postcomp_sdecdsum5,
    single_opponent_view.precomp_sdecdsum5 as opp_precomp_sdecdsum5,
    single_opponent_view.postcomp_sdecdavg5 as opp_postcomp_sdecdavg5,
    single_opponent_view.precomp_sdecdavg5 as opp_precomp_sdecdavg5,
    single_opponent_view.postcomp_mdecsum as opp_postcomp_mdecsum,
    single_opponent_view.precomp_mdecsum as opp_precomp_mdecsum,
    single_opponent_view.postcomp_mdecavg as opp_postcomp_mdecavg,
    single_opponent_view.precomp_mdecavg as opp_precomp_mdecavg,
    single_opponent_view.postcomp_mdecsum3 as opp_postcomp_mdecsum3,
    single_opponent_view.precomp_mdecsum3 as opp_precomp_mdecsum3,
    single_opponent_view.postcomp_mdecavg3 as opp_postcomp_mdecavg3,
    single_opponent_view.precomp_mdecavg3 as opp_precomp_mdecavg3,
    single_opponent_view.postcomp_mdecsum5 as opp_postcomp_mdecsum5,
    single_opponent_view.precomp_mdecsum5 as opp_precomp_mdecsum5,
    single_opponent_view.postcomp_mdecavg5 as opp_postcomp_mdecavg5,
    single_opponent_view.precomp_mdecavg5 as opp_precomp_mdecavg5,
    single_opponent_view.postcomp_mdecdsum as opp_postcomp_mdecdsum,
    single_opponent_view.precomp_mdecdsum as opp_precomp_mdecdsum,
    single_opponent_view.postcomp_mdecdavg as opp_postcomp_mdecdavg,
    single_opponent_view.precomp_mdecdavg as opp_precomp_mdecdavg,
    single_opponent_view.postcomp_mdecdsum3 as opp_postcomp_mdecdsum3,
    single_opponent_view.precomp_mdecdsum3 as opp_precomp_mdecdsum3,
    single_opponent_view.postcomp_mdecdavg3 as opp_postcomp_mdecdavg3,
    single_opponent_view.precomp_mdecdavg3 as opp_precomp_mdecdavg3,
    single_opponent_view.postcomp_mdecdsum5 as opp_postcomp_mdecdsum5,
    single_opponent_view.precomp_mdecdsum5 as opp_precomp_mdecdsum5,
    single_opponent_view.postcomp_mdecdavg5 as opp_postcomp_mdecdavg5,
    single_opponent_view.precomp_mdecdavg5 as opp_precomp_mdecdavg5
FROM single_fighter_view JOIN single_opponent_view
ON single_fighter_view.jbout = single_opponent_view.jbout AND
   single_fighter_view.jevent = single_opponent_view.jevent;
